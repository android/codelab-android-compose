/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext {
        compose_version = '1.0.0-SNAPSHOT'
    }
    ext.kotlin_version = "1.4.10"
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.2.0-alpha12"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        maven {
            url "https://androidx.dev/snapshots/builds/6860046/artifacts/ui/repository/"
        }
        google()
        jcenter()
    }
    // Create a configuration which allows us to intercept the JARs, and add them to
    // Kotlin Compiler freeCompilerArgs. This is needed because we can't currently use the
    // built-in `compose` feature in AGP, since it depends on the old Compose Compiler artifacts.
    // TODO: Remove this once AGP uses the new Compose Compiler artifact name
    def compilerPluginConfig = project.configurations.create("kotlinCompilerPlugin")

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach { compile ->
        kotlinOptions {
            // Opt-in to experimental compose APIs
            freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
        }
        compile.dependsOn(compilerPluginConfig)
        compile.doFirst {
            if (!compilerPluginConfig.isEmpty()) {
                // Add the compiler plugin JARs using the -Xplugin flag
                compile.kotlinOptions.freeCompilerArgs +=
                        "-Xplugin=${compilerPluginConfig.files.first()}"
                // Need to turn on the IR compiler too
                compile.kotlinOptions.useIR = true
            }
        }
    }
}
